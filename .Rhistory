my_schools=c(input$input1,input$input2)
get.tuitionfee_out.outputs <- function(data,school){
relevent_data <- data[data$INSTNM == school,]
tuitionfee_out <- relevent_data$TUITIONFEE_OUT
return(tuitionfee_out)
}
output <- as.matrix(rbind(get.tuitionfee_out.outputs(college,my_schools[1]),get.tuitionfee_out.outputs(college,my_schools[2])))
rownames(output) <- c(my_schools[1], my_schools[2])
return(output)
})
output$tuitionfee_out1= renderText(paste0("$",MY_tuitionfee_out_display()[1,]))
output$tuitionfee_out2= renderText(paste0("$",MY_tuitionfee_out_display()[2,]))
############## get data used to display out-of-state tuition
MY_pctfloan_display=reactive({
# Get the needed reactive objects:
my_schools=c(input$input1,input$input2)
get.pctfloan.outputs <- function(data,school){
relevent_data <- data[data$INSTNM == school,]
#get PCTFLOAN
pctfloan <- relevent_data$PCTFLOAN
pctfloan <- paste(pctfloan*100,"%",collapse="")
return(pctfloan)
}
output <- as.matrix(rbind(get.pctfloan.outputs(college,my_schools[1]),get.pctfloan.outputs(college,my_schools[2])))
rownames(output) <- c(my_schools[1], my_schools[2])
return(output)
})
output$pctfloan1= renderText(MY_pctfloan_display()[1,])
output$pctfloan2= renderText(MY_pctfloan_display()[2,])
############## get data used to display ugds
MY_ugds_display=reactive({
# Get the needed reactive objects:
my_schools=c(input$input1,input$input2)
get.ugds.outputs <- function(data,school){
relevent_data <- data[data$INSTNM == school,]
ugds <- relevent_data$UGDS
return(ugds)
}
output <- as.matrix(rbind(get.ugds.outputs(college,my_schools[1]),get.ugds.outputs(college,my_schools[2])))
rownames(output) <- c(my_schools[1], my_schools[2])
return(output)
})
output$ugds1= renderText(MY_ugds_display()[1,])
output$ugds2= renderText(MY_ugds_display()[2,])
############## get data used to display instnm
MY_instnm_display=reactive({
# Get the needed reactive objects:
my_schools=c(input$input1,input$input2)
get.instnm.outputs <- function(data,school){
relevent_data <- data[data$INSTNM == school,]
instnm <- relevent_data$INSTNM
return(instnm)
}
output <- as.matrix(rbind(get.instnm.outputs(college,my_schools[1]),get.instnm.outputs(college,my_schools[2])))
rownames(output) <- c(my_schools[1], my_schools[2])
return(output)
})
output$instnm1= renderText(MY_instnm_display()[1,])
output$instnm2= renderText(MY_instnm_display()[2,])
####################### get data used to draw bar graph of different majors
MY_summary_stat=reactive({
# Get the needed reactive objects:
my_schools=c(input$input1,input$input2)
get.bargraph.data <- function(data,school){
my.text <- "PCIP[0-9][0-9]"
indices <- grepl(my.text,colnames(data))
my.data <- data[data$INSTNM==school,indices]
if (is.na(my.data[1,1])){
my.data <- rep(0,length(my.data))
}
return(my.data)
}
output <- as.matrix(rbind(get.bargraph.data(college,my_schools[1]),get.bargraph.data(college,my_schools[2])))
rownames(output) <- c(my_schools[1], my_schools[2])
return(output)
})
major.names <- c("Agriculture", "Natural Resources and Conservation",
"Architecture", "Group (Gender, Ethnic, etc.) Studies",
"Communication & Journalism", "Communications Technologies",
"Computer & Information Sciences", "Personal & Culinary Services",
"Education", "Engineering","Engieering Technologies",
"Foreign Languages","Consumer/Human Sciences", "Legal Professions",
"English", "General Studies & Humanities", "Library Science",
"Biological & Biomedical Sciences", "Mathematics & Statistics",
"Military Techologies", "Multi/Interdisciplinary Studies",
"Fitness Studies", "Philosophy & Religious Studies", "Theology",
"Physical Sciences","Science Technologies", "Psychology",
"Homeland Security", "Public Admin. & Social Service", "Social Sciences",
"Construction Trades", "Mechanic and Repair Technologies",
"Precision Production", "Transportation","Visual & Performing Arts",
"Health Professions","Business","History")
output$my_barplot1=renderPlotly({
plot_ly(
x = major.names,
y = MY_summary_stat()[1,],
name = "school",
type = "bar"
) %>%
layout(title = paste("Major distribution of <br>", my_schools()[1]),
xaxis = list(tickangle=-65),margin=list(b=230))
})
output$my_barplot2=renderPlotly({
plot_ly(
x = major.names,
y = MY_summary_stat()[2,],
name = "school",
type = "bar"
) %>%
layout(title = paste("Major distribution of <br>", my_schools()[2]),
xaxis = list(tickangle=-65), margin=list(b=230))
})
###############get data used to draw pie chart of ethnicity
MY_ethnicity_data1=reactive({
# Get the needed reactive objects:
my_schools=c(input$input1,input$input2)
get.pie.chart <- function(data, school){
my.text <- "UGDS_2*[A-Z]+"
indices <- grepl(my.text,colnames(data))
my.data <- data[data$INSTNM==school,indices]
my.data <- my.data[,1:9]
demo.names <- c("White","Black","Hispanic","Asian","American Indian/Alaska Native",
"Native Hawaiian/Pacific Islander","2 or More Races","Non-resident Aliens",
"Unknown")
colnames(my.data) <- demo.names
to.remove <- NULL
for (i in 1:length(my.data)){
if (my.data[i] == 0 | is.na(my.data[i])){
to.remove <- c(to.remove,i)
}
}
if (length(my.data) == length(to.remove)){
my.df <- data.frame(1)
colnames(my.df) <- "NA"
return(my.df)
} else {
if (!is.null(to.remove)){
my.df <- my.data[,-to.remove]
colnames(my.df) <- demo.names[-to.remove]
return(my.df)
} else{return(my.data)}
}
}
output <- as.matrix(get.pie.chart(college, my_schools[1]))
rownames(output) <- 1
output <- data.frame("type" = demo.names, "value" = t(output))
return(output)
})
output$demographics1 <-renderPlotly(
plot_ly(MY_ethnicity_data1(), labels = ~type, values = ~X1, type = 'pie')%>%
layout(title = paste("Ethnicity diversity of <br>", my_schools()[1],"<br>"),
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
legend=list(orientation='h'))
)
MY_ethnicity_data2=reactive({
# Get the needed reactive objects:
my_schools=c(input$input1,input$input2)
get.pie.chart <- function(data, school){
my.text <- "UGDS_2*[A-Z]+"
indices <- grepl(my.text,colnames(data))
my.data <- data[data$INSTNM==school,indices]
my.data <- my.data[,1:9]
demo.names <- c("White","Black","Hispanic","Asian","American Indian/Alaska Native",
"Native Hawaiian/Pacific Islander","2 or More Races","Non-resident Aliens",
"Unknown")
colnames(my.data) <- demo.names
to.remove <- NULL
for (i in 1:length(my.data)){
if (my.data[i] == 0 | is.na(my.data[i])){
to.remove <- c(to.remove,i)
}
}
if (length(my.data) == length(to.remove)){
my.df <- data.frame(1,"Privacy Suppressed")
#colnames(my.df) <- "NA"
return(my.df)
} else {
if (!is.null(to.remove)){
my.df <- my.data[,-to.remove]
colnames(my.df) <- demo.names[-to.remove]
my.df <- cbind(t(my.df),colnames(my.df))
return(my.df)
} else{
my.df <- cbind(t(my.data),colnames(my.data))
return(my.df)}
}
}
#output <- as.matrix(get.pie.chart(college, my_schools[2]))
#rownames(output) <- 2
output <- get.pie.chart(college,my_schools[2])
return(output)
})
output$demographics2 <-
renderPlotly(
plot_ly(MY_ethnicity_data2(), labels = MY_ethnicity_data2()[,2],
values = MY_ethnicity_data2()[,1],
type = 'pie')%>%
layout(title = paste("Ethnicity diversity of <br>", my_schools()[2],"<br>"),
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
legend=list(orientation='h'))
)
#############get data used to draw pie chart of female students
MY_female_data1=reactive({
# Get the needed reactive objects:
my_schools=c(input$input1,input$input2)
get.mf.data <- function(data,school){
index <- which(data$INSTNM == school)
female <- data$FEMALE[index]
if (is.na(female)) {female <- "PrivacySuppressed"}
if(female=="PrivacySuppressed"){
out.val<-data.frame(1,"Privacy Suppressed")
} else{
female<-as.numeric(female)
out.val<-data.frame(c(female,1-female),c("Female","Male"))
}
return(out.val)
}
output <- get.mf.data(college, my_schools[1])
colnames(output) <- c("1","mf")
return(output)
})
output$female1 <- renderPlotly(
plot_ly(MY_female_data1(), labels = ~MY_female_data1()[,2], values = ~MY_female_data1()[,1], type = 'pie') %>%
layout(title = paste("Gender diversity of <br>", my_schools()[1]),
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
legend=list(orientation='h'))
)
MY_female_data2=reactive({
# Get the needed reactive objects:
my_schools=c(input$input1,input$input2)
get.mf.data <- function(data,school){
index <- which(data$INSTNM == school)
female <- data$FEMALE[index]
if (is.na(female)) {female <- "PrivacySuppressed"}
#relevent_data <- data[data$INSTNM == school,]
#female <- relevent_data$FEMALE
if(female=="PrivacySuppressed"){
out.val<-data.frame(1,"Privacy Suppressed")
} else{
female<-as.numeric(female)
out.val<-data.frame(c(female,1-female),c("Female","Male"))
}
return(out.val)
}
output <- get.mf.data(college, my_schools[2])
colnames(output) <- c("2","mf")
return(output)
})
output$female2 <- renderPlotly(
plot_ly(MY_female_data2(), labels = MY_female_data2()[,2], values = MY_female_data2()[,1], type = 'pie') %>%
layout(title = paste("Gender diversity of <br>", my_schools()[2]),
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
legend=list(orientation='h'))
)
debt.data.1 <- reactive({
family.income = input$fincome
my_schools=c(input$input1,input$input2)
get.debt.mdn <- function(data,school,family.income) {
if (family.income <= 30000) {
debt.mdn <- data$LO_INC_DEBT_MDN[data$INSTNM==school]
} else if (family.income > 30000 & family.income <= 75000) {
debt.mdn <- data$MD_INC_DEBT_MDN[data$INSTNM==school]
} else if (family.income > 75000) {
debt.mdn <- data$HI_INC_DEBT_MDN[data$INSTNM==school]
}
return(debt.mdn)
}
output1 = get.debt.mdn(college,my_schools()[1],family.income)
return(output1)
})
debt.data.2 <- reactive({
family.income = input$fincome
my_schools=c(input$input1,input$input2)
get.debt.mdn <- function(data,school,family.income) {
if (family.income <= 30000) {
debt.mdn <- data$LO_INC_DEBT_MDN[data$INSTNM==school]
} else if (family.income > 30000 & family.income <= 75000) {
debt.mdn <- data$MD_INC_DEBT_MDN[data$INSTNM==school]
} else if (family.income > 75000) {
debt.mdn <- data$HI_INC_DEBT_MDN[data$INSTNM==school]
}
return(debt.mdn)
}
output2 = get.debt.mdn(college,my_schools()[2],family.income)
return(output2)
})
output$debt1 <- renderText(paste0("$",debt.data.1()))
output$debt2 <- renderText(paste0("$",debt.data.2()))
}
)
runApp('app/map back up.R')
library(shiny)
library(ggmap)
library(leaflet)
library(dplyr)
college.1 = read.csv("D:/Columbia University/Spring2017-Applied Data Science/Project_2_Bz2290/Spr2017-proj2-grp4/data/school.select.csv",header = TRUE)
major = c("Agriculture, Agriculture Operations, And Related Sciences","Natural Resources And Conservation", "Architecture And Related Services","Area, Ethnic, Cultural, Gender, And Group Studies"," Communication, Journalism, And Related Programs","Communications Technologies/Technicians And Support Services","Computer And Information Sciences And Support Services","Personal And Culinary Services"," Education","Engineering","Engineering Technologies And Engineering-Related Fields","Foreign Languages, Literatures, And Linguistics"," Family And Consumer Sciences/Human Sciences","Legal Professions And Studies","English Language And Literature/Letters","Liberal Arts And Sciences, General Studies And Humanities","Library Science"," Biological And Biomedical Sciences","Mathematics And Statistics","Military Technologies And Applied Sciences","Multi/Interdisciplinary Studies","Parks, Recreation, Leisure, And Fitness Studies","Philosophy And Religious Studies","Theology And Religious Vocations"," Physical Sciences"," Science Technologies/Technicians"," Psychology"," Homeland Security, Law Enforcement, Firefighting And Related Protective Services","Public Administration And Social Service Professions","Social Sciences","Construction Trades","Mechanic And Repair Technologies/Technicians","Precision Production","Transportation And Materials Moving","Visual And Performing Arts","Health Professions And Related Programs","Business, Management, Marketing, And Related Support Services","History")
major.index =c("PCIP01",
"PCIP03",
"PCIP04",
"PCIP05",
"PCIP09",
"PCIP10",
"PCIP11",
"PCIP12",
"PCIP13",
"PCIP14",
"PCIP15",
"PCIP16",
"PCIP19",
"PCIP22",
"PCIP23",
"PCIP24",
"PCIP25",
"PCIP26",
"PCIP27",
"PCIP29",
"PCIP30",
"PCIP31",
"PCIP38",
"PCIP39",
"PCIP40",
"PCIP41",
"PCIP42",
"PCIP43",
"PCIP44",
"PCIP45",
"PCIP46",
"PCIP47",
"PCIP48",
"PCIP49",
"PCIP50",
"PCIP51",
"PCIP52",
"PCIP54")
major.frame = data.frame(major = major, index = major.index)
runApp('app/map back up.R')
setwd("D:/Columbia University/Spring2017-Applied Data Science/Project_2_Bz2290/Spr2017-proj2-grp4")
runApp('app/map back up.R')
runApp('app/map back up.R')
runApp('app/map back up.R')
runApp('app/map back up.R')
runApp('app/map back up.R')
runApp('app/map back up.R')
runApp('app/map back up.R')
runApp('app/map back up.R')
getwd
getwd()
library(shiny); runApp('app/Final App.R')
college.filtered = read.csv(".../data/school.select.csv",header = TRUE,stringsAsFactors = FALSE)
geted()
getwd()
college.filtered = read.csv("...Spr2017-proj2-grp4/data/school.select.csv",header = TRUE,stringsAsFactors = FALSE)
runApp('app/Final App.R')
runApp('app/Final App.R')
library(shiny); runApp('app/Final App.R')
library(shiny)
library(shinyBS)
shinyApp(
ui =
fluidPage(
sidebarLayout(
sidebarPanel(HTML("This button will open Panel 1 using updateCollapse."),
actionButton("p1Button", "Push Me!"),
selectInput("styleSelect", "Select style for Panel 1",
c("default", "primary", "danger", "warning", "info", "success"))
),
mainPanel(
bsCollapse(id = "collapseExample", open = "Panel 2",
bsCollapsePanel("Panel 1", "This is a panel with just text ",
"and has the default style. You can change the style in ",
"the sidebar.", style = "info"),
bsCollapsePanel("Panel 2", "This panel has a generic plot. ",
"and a 'success' style.", plotOutput("genericPlot"), style = "success")
)
)
)
),
server =
function(input, output, session) {
output$genericPlot <- renderPlot(plot(rnorm(100)))
observeEvent(input$p1Button, ({
updateCollapse(session, "collapseExample", open = "Panel 1")
}))
observeEvent(input$styleSelect, ({
updateCollapse(session, "collapseExample", style = list("Panel 1" = input$styleSelect))
}))
}
)
install.packages("shinyBS")
library(shiny)
library(shinyBS)
#install.packages("shinyBS")
shinyApp(
ui =
fluidPage(
sidebarLayout(
sidebarPanel(HTML("This button will open Panel 1 using updateCollapse."),
actionButton("p1Button", "Push Me!"),
selectInput("styleSelect", "Select style for Panel 1",
c("default", "primary", "danger", "warning", "info", "success"))
),
mainPanel(
bsCollapse(id = "collapseExample", open = "Panel 2",
bsCollapsePanel("Panel 1", "This is a panel with just text ",
"and has the default style. You can change the style in ",
"the sidebar.", style = "info"),
bsCollapsePanel("Panel 2", "This panel has a generic plot. ",
"and a 'success' style.", plotOutput("genericPlot"), style = "success")
)
)
)
),
server =
function(input, output, session) {
output$genericPlot <- renderPlot(plot(rnorm(100)))
observeEvent(input$p1Button, ({
updateCollapse(session, "collapseExample", open = "Panel 1")
}))
observeEvent(input$styleSelect, ({
updateCollapse(session, "collapseExample", style = list("Panel 1" = input$styleSelect))
}))
}
)
library(shiny)
library(shinyBS)
#install.packages("shinyBS")
shinyApp(
ui =
fluidPage(
sidebarLayout(
sidebarPanel(HTML("This button will open Panel 1 using updateCollapse."),
actionButton("p1Button", "Push Me!"),
selectInput("styleSelect", "Select style for Panel 1",
c("default", "primary", "danger", "warning", "info", "success"))
),
mainPanel(
bsCollapse(id = "collapseExample", open = "Panel 2",
bsCollapsePanel("Panel 1", "This is a panel with just text ",
"and has the default style. You can change the style in ",
"the sidebar.", style = "info"),
bsCollapsePanel("Panel 2", "This panel has a generic plot. ",
"and a 'success' style.", plotOutput("genericPlot"), style = "success")
)
)
)
),
server =
function(input, output, session) {
output$genericPlot <- renderPlot(plot(rnorm(100)))
observeEvent(input$p1Button, ({
updateCollapse(session, "collapseExample", open = "Panel 1")
}))
observeEvent(input$styleSelect, ({
updateCollapse(session, "collapseExample", style = list("Panel 1" = input$styleSelect))
}))
}
)
runApp('C:/Users/lenovo/Desktop/testing.R')
runApp('app/Final App.R')
runApp('app/Final App.R')
runApp('app/Final App.R')
runApp('app/Final App.R')
runApp('app/Final App.R')
runApp('app/Final App.R')
runApp('app/Final App.R')
#Let f denotes the riskless rate of return and e.m denotes the expected market return.
f = 4/100
e.m = 12/100
#Let s.m denotes the standard deviation of market return
s.m = 11/100
#Thue the beta of stock A is:
B = (165/100)/((s.m)^2)
B
#Let f denotes the riskless rate of return and e.m denotes the expected market return.
f = 4/100
e.m = 12/100
#Let s.m denotes the standard deviation of market return
s.m = 11/100
#Thue the beta of stock A is:
B = (165/100)^2/((s.m)^2)
B
#Let f denotes the riskless rate of return and e.m denotes the expected market return.
f = 4/100
e.m = 12/100
#Let s.m denotes the standard deviation of market return
s.m = 11/100
#Thue the beta of stock A is:
B = ((165/100)^2)/((s.m)^2)
B
#let r.a denotes the expected return on Stock A
#Then
r.a = B*(e.m-f) + f
#And the expected return is:
r.a
#Let f denotes the riskless rate of return and e.m denotes the expected market return.
f = 4/100
e.m = 12/100
#Let s.m denotes the standard deviation of market return
s.m = 11/100
#Thue the beta of stock A is:
B = ((165/10000))/((s.m)^2)
B
#let r.a denotes the expected return on Stock A
#Then
r.a = B*(e.m-f) + f
#And the expected return is:
r.a
library(shiny); runApp('app/Final App.R')
