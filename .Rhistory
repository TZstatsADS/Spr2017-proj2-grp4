library(shiny)
library(ggmap)
library(leaflet)
library(dplyr)
library(shinyBS)
library(plotly)
install.packages("plotly")
library(plotly)
library(extrafont)
install.packages("extrafont")
install.packages("grDevices")
install.packages("grDevices")
install.packages("grDevices")
install.packages("grDevices")
install.packages("grDevices")
install.packages("grDevices")
library(shiny)
library(ggmap)
library(leaflet)
library(dplyr)
library(plotly)
library(extrafont)
runApp('Structure.backup - Copy - Copy.R')
runApp('Structure.backup - Copy - Copy.R')
runApp('Structure.backup - Copy - Copy.R')
library(shiny); runApp('Structure.backup - Copy - Copy.R')
shiny::runApp()
runApp()
runApp()
runApp()
setwd("~/GitHub/Spr2017-proj2-grp4")
college.filtered = read.csv("../data/school.select.csv",header = TRUE,stringsAsFactors = FALSE)
college =  read.csv("../data/College2014_15_new.csv",header = TRUE,stringsAsFactors = FALSE, na.strings = "NULL")
setwd("~/GitHub/Spr2017-proj2-grp4")
college.filtered = read.csv("~/GitHub/Spr2017-proj2-grp4/data/school.select.csv",header = TRUE,stringsAsFactors = FALSE)
college =  read.csv("~/GitHub/Spr2017-proj2-grp4/data/College2014_15_new.csv",header = TRUE,stringsAsFactors = FALSE, na.strings = "NULL")
saveRDS(college, 'College2014_15_new.rds')
saveRDS(college.filtered, 'school.select.rds')
runApp('app')
runApp('app')
shiny::runApp('app')
runApp('app')
runApp('app')
runApp('app')
library(leaflet)
library(shiny)
ui <- fluidPage(
leafletOutput("map1")
)
server <- function(input, output, session) {
output$map1 <- renderLeaflet({
leaflet() %>% addCircleMarkers(
lng = runif(10),
lat = runif(10),
layerId = paste0("marker", 1:10))
})
observeEvent(input$map1_marker_click, {
leafletProxy("map1", session) %>%
removeMarker(input$map1_marker_click$id)
})
}
shinyApp(ui, server)
library(shiny)
library(leaflet)
library(maps)
ui <- fluidPage(
leafletOutput("CountryMap", width = 1000, height = 500)
)
server <- function(input, output){
Country = map("world", fill = TRUE, plot = FALSE, regions="USA", exact=TRUE)
output$CountryMap <- renderLeaflet({
leaflet(Country) %>% addTiles() %>%
fitBounds(Country$range[1], Country$range[3], Country$range[2], Country$range[4])%>%
addPolygons(fillOpacity = 0.6,  smoothFactor = 0.5, stroke = TRUE, weight = 1)
})
}
shinyApp(ui =ui, server = server)
runApp('app')
runApp('app')
myMap.getcenter()
?map.getcenter()
library(shiny)
library(leaflet)
ui <- fluidPage(
fluidRow(
column(6, leafletOutput("map1")),
column(6, leafletOutput("map2"))
)
)
server <- function(input, output, session) {
output$map1 <- renderLeaflet({
leaflet() %>% addTiles()
})
output$map2 <- renderLeaflet({
leaflet() %>% addTiles()
})
observe({
b <- input$map1_bounds
leafletProxy("map2") %>% setView(mean(c(b$west, b$east)), mean(c(b$north, b$south)), input$map1_zoom)
})
}
library(shiny)
library(leaflet)
ui <- fluidPage(
fluidRow(
column(6, leafletOutput("map1")),
column(6, leafletOutput("map2"))
)
)
server <- function(input, output, session) {
output$map1 <- renderLeaflet({
leaflet() %>% addTiles()
})
output$map2 <- renderLeaflet({
leaflet() %>% addTiles()
})
observe({
b <- input$map1_bounds
leafletProxy("map2") %>% setView(mean(c(b$west, b$east)), mean(c(b$north, b$south)), input$map1_zoom)
})
}
shinyApp(ui, server)
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
shiny::runApp('app')
runApp('app')
shiny::runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
shiny::runApp('app')
shiny::runApp('app')
