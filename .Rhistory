runExample("01_hello")
setwd("D:/Columbia University/Spring2017-Applied Data Science/Project_2_Bz2290/data/CollegeScorecard_Raw_Data/CollegeScorecard_Raw_Data")
file = read.csv("MERGED1996_97_PP.csv",header = TRUE)
file = subset(file,file$STABBR == "NY")
View(file)
View(file)
colnames(file)[1] = "UNITID"
View(file)
View(file)
write.csv("College1996_97.csv",file)
?write.csv
write.csv(file,file="College1996_97.csv")
file = read.csv("MERGED1997_98_PP.csv",header = TRUE)
file = subset(file,file$STABBR == "NY")
colnames(file)[1] = "UNITID"
write.csv(file,file="College1997_98.csv")
file = read.csv("MERGED1998_99_PP.csv",header = TRUE)
file = subset(file,file$STABBR == "NY")
colnames(file)[1] = "UNITID"
write.csv(file,file="College1998_99.csv")
file = read.csv("MERGED1999_00_PP.csv",header = TRUE)
file = subset(file,file$STABBR == "NY")
colnames(file)[1] = "UNITID"
write.csv(file,file="College1999_00.csv")
?substring
paste("MERGE",as.character(i),"_",substring(as.character(i+1),start = 3, stop = 4),"_","PP")
paste("MERGE",as.character(i),"_",substring(as.character(i+1),start = 3, stop = 4),"_","PP")
i  = 2000
paste("MERGE",as.character(i),"_",substring(as.character(i+1),start = 3, stop = 4),"_","PP")
paste("MERGE",as.character(i),"_",substr(as.character(i+1),start = 3, stop = 4),"_","PP")
paste("MERGE",as.character(i),"_",substr(as.character(i+1),start = 3, stop = 4),"_","PP",sep="")
paste("MERGE",as.character(i),"_",substr(as.character(i+1),start = 3, stop = 4),"_","PP",".csv",sep="")
paste("MERGED",as.character(i),"_",substr(as.character(i+1),start = 3, stop = 4),"_","PP",".csv",sep="")
name = paste("MERGED",as.character(i),"_",substr(as.character(i+1),start = 3, stop = 4),"_","PP",".csv",sep="")
file = read.csv(name,header = TRUE)
View(file)
View(file)
output = paste("College",as.character(i),"_",substr(as.character(i+1),start = 3, stop = 4),".csv",sep="")
output
for (i in 2000 : 2014)
{
name = paste("MERGED",as.character(i),"_",substr(as.character(i+1),start = 3, stop = 4),"_","PP",".csv",sep="")
file = read.csv(name,header = TRUE)
file = subset(file,file$STABBR == "NY")
colnames(file)[1] = "UNITID"
write.csv(file,file=paste("College",as.character(i),"_",substr(as.character(i+1),start = 3, stop = 4),".csv",sep=""))
}
i = 1996
name = paste("MERGED",as.character(i),"_",substr(as.character(i+1),start = 3, stop = 4),"_","PP",".csv",sep="")
file = read.csv(name,header = TRUE)
file = subset(file,file$STABBR == "NY")
colnames(file)[1] = "UNITID"
write.csv(file,file=paste("College",as.character(i),"_",substr(as.character(i+1),start = 3, stop = 4),".csv",sep=""))
library(shiny); runApp('app/Structure.R')
runApp('app/Structure.R')
runApp('app/Structure.R')
runApp('app/Structure.R')
runApp('app/Structure.R')
runApp('app/Structure.R')
runApp('app/Structure.R')
?hoverOpts()
runApp('app/Structure.R')
library(shiny); runApp('app/Structure.R')
library(shiny)
data_sets <- c("mtcars", "morley", "rock")
shinyApp(
ui = fluidPage(
pageWithSidebar(
headerPanel(""),
sidebarPanel(
uiOutput("choose_dataset"),
uiOutput("choose_columns"),
br(),
a(href = "https://gist.github.com/4211337", "Source code")
),
mainPanel(
tableOutput("data_table")
)
))
server = function(input, output) {
# Drop-down selection box for which data set
output$choose_dataset <- renderUI({
selectInput("dataset", "Data set", as.list(data_sets))
})
# Check boxes
output$choose_columns <- renderUI({
# If missing input, return to avoid error later in function
if(is.null(input$dataset))
return()
# Get the data set with the appropriate name
dat <- get(input$dataset)
colnames <- names(dat)
# Create the checkboxes and select them all by default
checkboxGroupInput("columns", "Choose columns",
choices  = colnames,
selected = colnames)
})
# Output the data
output$data_table <- renderTable({
# If missing input, return to avoid error later in function
if(is.null(input$dataset))
return()
# Get the data set
dat <- get(input$dataset)
# Make sure columns are correct for data set (when data set changes, the
# columns will initially be for the previous data set)
if (is.null(input$columns) || !(input$columns %in% names(dat)))
return()
# Keep the selected columns
dat <- dat[, input$columns, drop = FALSE]
# Return first 20 rows
head(dat, 20)
})
}
)
shinyApp(
ui = fluidPage(
titlePanel("Conditional panels"),
column(4, wellPanel(
sliderInput("n", "Number of points:",
min = 10, max = 20, value = 10, step = 1)
)),
column(5,
conditionalPanel("input.n >= 15",
absolutePanel(top = 20,
left = 20,
width = 300,
height = 600,
draggable = TRUE,
cursor = "move",
wellPanel(
sliderInput("n", "", min=3, max=20, value=5)
),
style = "opacity: 0.1"
)
)
),
column(5,
conditionalPanel("input.n < 15",
absolutePanel(top = 20,
left = 20,
width = 300,
height = 600,
draggable = TRUE,
cursor = "move",
wellPanel(
sliderInput("n", "", min=3, max=20, value=5)
),
style = "opacity: 0.9"
)
)
)
),
server = function(input, output){
}
)
library(shinyApp)
shinyApp(
ui = fluidPage(
titlePanel("Conditional panels"),
column(4, wellPanel(
sliderInput("n", "Number of points:",
min = 10, max = 20, value = 10, step = 1)
)),
column(5,
conditionalPanel("input.n >= 15",
absolutePanel(top = 20,
left = 20,
width = 300,
height = 600,
draggable = TRUE,
cursor = "move",
wellPanel(
sliderInput("n", "", min=3, max=20, value=5)
),
style = "opacity: 0.1"
)
)
),
column(5,
conditionalPanel("input.n < 15",
absolutePanel(top = 20,
left = 20,
width = 300,
height = 600,
draggable = TRUE,
cursor = "move",
wellPanel(
sliderInput("n", "", min=3, max=20, value=5)
),
style = "opacity: 0.9"
)
)
)
),
server = function(input, output){
}
)
library(shiny)
shinyApp(
ui = fluidPage(
titlePanel("Conditional panels"),
column(4, wellPanel(
sliderInput("n", "Number of points:",
min = 10, max = 20, value = 10, step = 1)
)),
column(5,
conditionalPanel("input.n >= 15",
absolutePanel(top = 20,
left = 20,
width = 300,
height = 600,
draggable = TRUE,
cursor = "move",
wellPanel(
sliderInput("n", "", min=3, max=20, value=5)
),
style = "opacity: 0.1"
)
)
),
column(5,
conditionalPanel("input.n < 15",
absolutePanel(top = 20,
left = 20,
width = 300,
height = 600,
draggable = TRUE,
cursor = "move",
wellPanel(
sliderInput("n", "", min=3, max=20, value=5)
),
style = "opacity: 0.9"
)
)
)
),
server = function(input, output){
}
)
runApp('C:/Users/lenovo/Desktop/Reactive.R')
runApp('C:/Users/lenovo/Desktop/Reactive.R')
runApp('C:/Users/lenovo/Desktop/Reactive.R')
runApp('C:/Users/lenovo/Desktop/Reactive.R')
runApp('C:/Users/lenovo/Desktop/Reactive.R')
runApp('C:/Users/lenovo/Desktop/Reactive.R')
runApp('app/Structure.R')
runApp('app/Structure.R')
runApp('app/Structure.R')
runApp('app/Structure.R')
runApp('app/Structure.R')
runApp('app/Structure.R')
runApp('app/Structure.R')
runApp('C:/Users/lenovo/Desktop/Reactive.R')
library(shiny)
library(shinydashboard)
library(shinyjs)
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody(
useShinyjs(),
actionButton("showSidebar", "Show sidebar"),
actionButton("hideSidebar", "Hide sidebar")
)
)
server <-function(input, output) {
observeEvent(input$showSidebar, {
shinyjs::removeClass(selector = "body", class = "sidebar-collapse")
})
observeEvent(input$hideSidebar, {
shinyjs::addClass(selector = "body", class = "sidebar-collapse")
})
}
shinyApp(ui, server)
library(shiny)
library(shinydashboard)
library(shinyjs)
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody(
useShinyjs(),
actionButton("showSidebar", "Show sidebar"),
actionButton("hideSidebar", "Hide sidebar")
)
)
server <-function(input, output) {
observeEvent(input$showSidebar, {
shinyjs::removeClass(selector = "body", class = "sidebar-collapse")
})
observeEvent(input$hideSidebar, {
shinyjs::addClass(selector = "body", class = "sidebar-collapse")
})
}
shinyApp(ui, server)
library(shiny)
library(shinydashboard)
library(shinyjs)
shinyApp(
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody(
useShinyjs(),
actionButton("showSidebar", "Show sidebar"),
actionButton("hideSidebar", "Hide sidebar")
)
)
server <-function(input, output) {
observeEvent(input$showSidebar, {
shinyjs::removeClass(selector = "body", class = "sidebar-collapse")
})
observeEvent(input$hideSidebar, {
shinyjs::addClass(selector = "body", class = "sidebar-collapse")
})
}
)
library(shiny)
library(shinydashboard)
library(shinyjs)
install.packages("shinydashboard")
runApp('app/Structure.R')
runApp('app/Structure.R')
library(shiny)
library(shinydashboard)
library(shinyjs)
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody(
useShinyjs(),
actionButton("showSidebar", "Show sidebar"),
actionButton("hideSidebar", "Hide sidebar")
)
)
server <-function(input, output) {
observeEvent(input$showSidebar, {
shinyjs::removeClass(selector = "body", class = "sidebar-collapse")
})
observeEvent(input$hideSidebar, {
shinyjs::addClass(selector = "body", class = "sidebar-collapse")
})
}
shinyApp(ui, server)
library(shiny)
library(shinydashboard)
library(shinyjs)
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody(
)
)
server <-function(input, output) {
}
shinyApp(ui, server)
library(shiny)
library(shinydashboard)
library(shinyjs)
shinyApp(
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody(
)
)
server <-function(input, output) {
}
)
library(shiny)
library(shinydashboard)
library(shinyjs)
shinyApp(
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody(
)
),
server <-function(input, output) {
}
)
library(shiny)
library(shinydashboard)
library(shinyjs)
shinyApp(
ui <- dashboardPage(
dashboardHeader("Our App's Name"),
dashboardSidebar("tab1","tab2","tab3"),
dashboardBody(
)
),
server <-function(input, output) {
}
)
library(shiny)
library(shinydashboard)
library(shinyjs)
shinyApp(
ui <- dashboardPage(
dashboardHeader(titel = "Our App's Name"),
dashboardSidebar("tab1","tab2","tab3"),
dashboardBody(
)
),
server <-function(input, output) {
}
)
library(shiny)
library(shinydashboard)
library(shinyjs)
shinyApp(
ui <- dashboardPage(
dashboardHeader(titel = "Our App's Name"),
dashboardSidebar(),
dashboardBody(
)
),
server <-function(input, output) {
}
)
library(shiny)
library(shinydashboard)
library(shinyjs)
shinyApp(
ui <- dashboardPage(
dashboardHeader(title = "Our App's Name"),
dashboardSidebar(),
dashboardBody(
)
),
server <-function(input, output) {
}
)
library(shiny)
library(shinydashboard)
library(shinyjs)
shinyApp(
ui <- dashboardPage(
dashboardHeader(title = "Our App's Name"),
dashboardSidebar(menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard"))),
dashboardBody(
)
),
server <-function(input, output) {
}
)
runApp('app/Structure.R')
runApp('app/Structure.R')
runApp('app/Structure.R')
runApp('app/Structure.R')
runApp('app/Structure.R')
runApp('app/Structure.R')
runApp('app/Structure.R')
runApp('app/Structure.R')
runApp('app/Structure.R')
runApp('app/Structure.R')
runApp('app/Structure.R')
runApp('app/Structure.R')
runApp('app/Structure.R')
runApp('app/Structure.R')
runApp('app/Structure.R')
runApp('app/Structure.R')
runApp('app/Structure.R')
runApp('app/Structure.R')
runApp('app/Structure.R')
runApp('app/Structure.R')
runApp('app/Structure.R')
runApp('app/Structure.R')
library(shiny)
library(shinydashboard)
library(shinyjs)
shinyApp(
ui <- dashboardPage(
dashboardHeader(title = "Our App's Name"),
dashboardSidebar(menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard"))),
dashboardBody(
)
),
server <-function(input, output) {
}
)
runApp('app/Structure.R')
runApp('app/Structure.R')
runApp('app/Structure.R')
w = (r.e - r.b)/(r.a - r.b)
#Let r.a and r.b denotes returns and s.a and s.b denotes standard deviation
#Let R denotes correlation
#hence
r.a = 2.3/100
r.b = 4.5/100
s.a = sqrt(6)/100
s.b = sqrt(11)/100
R = 0.17
#Let r.e denotes the expected return
#Then:
r.e = 3/100
#Since there are onlu two risky assets,
#thus the expected return is achieved by only one portfolio
#and its weight w, solves:
#r.e = r.b + w * (r.a - r.b)
#Thus the weight is:
w = (r.e - r.b)/(r.a - r.b)
w
1-w
w
1-w
V = matrix(c(s.a^2,s.a*s.b*R,s.a*s.b*R,s.b^2),byrow = TRUE)
V
V = matrix(c(s.a^2,s.a*s.b*R,s.a*s.b*R,s.b^2),byrow = TRUE,nrow = 2)
V
