geom_point(mapping = aes(x = plot.test$x, y = plot.test$y, col = as.character(plot.test$class)))+
labs(title = "Plot of test data set", x = "X", y = "Y")+
scale_color_discrete(name ="Class")+
geom_abline(slope = -(plot.line[1]/plot.line[2]), intercept = plot.line[3])
plot.line[1]
plot.line[2]
plot.line[3]
ggplot(data = plot.test)+
geom_point(mapping = aes(x = plot.test$x, y = plot.test$y, col = as.character(plot.test$class)))+
labs(title = "Plot of test data set", x = "X", y = "Y")+
scale_color_discrete(name ="Class")+
geom_abline(slope = -(plot.line[1]/plot.line[2]), intercept = -plot.line[3])
z.est$z
plot.test = data.frame(x=test.data$S[,1], y=test.data$S[,2], class=test.data$y)
plot.line = (z.est$z)/ifelse(z.est[1],z.est[2],z.est[1]>z.est[2])
ggplot(data = plot.test)+
geom_point(mapping = aes(x = plot.test$x, y = plot.test$y, col = as.character(plot.test$class)))+
labs(title = "Plot of test data set", x = "X", y = "Y")+
scale_color_discrete(name ="Class")+
geom_abline(slope = -(plot.line[1]/plot.line[2]), intercept = -plot.line[3])
plot.test = data.frame(x=test.data$S[,1], y=test.data$S[,2], class=test.data$y)
ggplot(data = plot.test)+
geom_point(mapping = aes(x = plot.test$x, y = plot.test$y, col = as.character(plot.test$class)))+
labs(title = "Plot of test data set", x = "X", y = "Y")+
scale_color_discrete(name ="Class")+
geom_abline(slope = -(plot.line[1]/plot.line[2]), intercept = -plot.line[3])
#Generate a random three dimensional random vector z
z = c(1,1,-3)
#Generate training data set:
train.data = fakedata(z,100)
#Train for an estimation of z
z.est = perceptrain(train.data$S, train.data$y)
#Generating test set
test.data = fakedata(z,100)
#Check for performance
mean(as.numeric(classify(test.data$S,z.est$z) != test.data$y))
#The mean error rate is extremely low, thus it performs relatively well.
plot.test = data.frame(x=test.data$S[,1], y=test.data$S[,2], class=test.data$y)
plot.line = (z.est$z)/ifelse(z.est[1]>z.est[2],z.est[1],z.est[2])
plot.line = (z.est$z)/ifelse(z.est[1]>z.est[2],z.est[1],z.est[2])
z.est[1]
plot.test = data.frame(x=test.data$S[,1], y=test.data$S[,2], class=test.data$y)
plot.line = (z.est$z)/ifelse(z.est$z[1]>z.est$z[2],z.est$z[1],z.est$z[2])
ggplot(data = plot.test)+
geom_point(mapping = aes(x = plot.test$x, y = plot.test$y, col = as.character(plot.test$class)))+
labs(title = "Plot of test data set", x = "X", y = "Y")+
scale_color_discrete(name ="Class")+
geom_abline(slope = -(plot.line[1]/plot.line[2]), intercept = -plot.line[3])
plot.test = data.frame(x=test.data$S[,1], y=test.data$S[,2], class=test.data$y)
plot.line = (z.est$z)/ifelse(z.est$z[1]<z.est$z[2],z.est$z[1],z.est$z[2])
ggplot(data = plot.test)+
geom_point(mapping = aes(x = plot.test$x, y = plot.test$y, col = as.character(plot.test$class)))+
labs(title = "Plot of test data set", x = "X", y = "Y")+
scale_color_discrete(name ="Class")+
geom_abline(slope = -(plot.line[1]/plot.line[2]), intercept = -plot.line[3])
plot.train = data.frame(x = train.data$S[,1], y = train.data$S[,2], class = train.data$y)
plot.line = z.est$Z_history
dim(plot.line)
plot.line
z.est$Z_history
plot.train = data.frame(x = train.data$S[,1], y = train.data$S[,2], class = train.data$y)
plot.line = z.est$Z_history
for(i in 1 : dim(plot.line)[1])
{
plot.line[i,] = plot.line[i,]/ifelse(plot.line[i,1]<plot.line[i,2],plot.line[i,1],plot.line[i,2])
}
ggplot(data = plot.train)+
geom_point(mapping = aes(x = plot.train$x, y = plot.train$y, col = as.character(plot.train$class)))+
labs(title="Plot of train data set with Trajectory", x = "X", y = "Y")+
scale_color_discrete(name = "Class")+
geom_abline(slope = -(plot.line[,1]/plot.line[,2]),intercept = -plot.line[,3])
runApp('app/Structure.bx.backup.R')
runApp('app/Structure.bx.backup.R')
runApp('app/Structure.bx.backup.R')
runApp('app/Structure - test.R')
runApp('app/Structure - test.R')
runApp('app/Structure - test.R')
setwd("D:/Columbia University/Spring2017-Applied Data Science/Project_2_Bz2290/Spr2017-proj2-grp4/data")
runApp('D:/Columbia University/Spring2017-Applied Data Science/Project_2_Bz2290/Spr2017-proj2-grp4/app/Structure - test.R')
runApp('D:/Columbia University/Spring2017-Applied Data Science/Project_2_Bz2290/Spr2017-proj2-grp4/app/Structure - test.R')
major.frame = data.frame(major = major, index = index)
major = c("Agriculture, Agriculture Operations, And Related Sciences","Natural Resources And Conservation", "Architecture And Related Services","Area, Ethnic, Cultural, Gender, And Group Studies"," Communication, Journalism, And Related Programs","Communications Technologies/Technicians And Support Services","Computer And Information Sciences And Support Services","Personal And Culinary Services"," Education","Engineering","Engineering Technologies And Engineering-Related Fields","Foreign Languages, Literatures, And Linguistics"," Family And Consumer Sciences/Human Sciences","Legal Professions And Studies","English Language And Literature/Letters","Liberal Arts And Sciences, General Studies And Humanities","Library Science"," Biological And Biomedical Sciences","Mathematics And Statistics","Military Technologies And Applied Sciences","Multi/Interdisciplinary Studies","Parks, Recreation, Leisure, And Fitness Studies","Philosophy And Religious Studies","Theology And Religious Vocations"," Physical Sciences"," Science Technologies/Technicians"," Psychology"," Homeland Security, Law Enforcement, Firefighting And Related Protective Services","Public Administration And Social Service Professions","Social Sciences","Construction Trades","Mechanic And Repair Technologies/Technicians","Precision Production","Transportation And Materials Moving","Visual And Performing Arts","Health Professions And Related Programs","Business, Management, Marketing, And Related Support Services","History")
major.index =c("PCIP01",
"PCIP03",
"PCIP04",
"PCIP05",
"PCIP09",
"PCIP10",
"PCIP11",
"PCIP12",
"PCIP13",
"PCIP14",
"PCIP15",
"PCIP16",
"PCIP19",
"PCIP22",
"PCIP23",
"PCIP24",
"PCIP25",
"PCIP26",
"PCIP27",
"PCIP29",
"PCIP30",
"PCIP31",
"PCIP38",
"PCIP39",
"PCIP40",
"PCIP41",
"PCIP42",
"PCIP43",
"PCIP44",
"PCIP45",
"PCIP46",
"PCIP47",
"PCIP48",
"PCIP49",
"PCIP50",
"PCIP51",
"PCIP52",
"PCIP54")
major.frame = data.frame(major = major, index = index)
major.frame = data.frame(major = major, index = major.index)
?order
A= c(1,2,3)
B=c("A","B",
"C")
d = data.frame(A=A,B=B)
d
d[order(d),]
d[order(d$A),]
d[order(d$A),][1:2,]
library(shiny); runApp('app/Structure.backup.R')
spam <- read.table("spam.data.txt", header = FALSE, sep = " ")
names(spam) <- c("make","address","all","3d","our","over","remove","internet","order","mail","receive","will","people",
"report","addresses","free","business","email","you","credit","your","font","000","money","hp",
"hpl","george","650","lab","labs","telnet","857","data","415","85","technology","1999","parts",
"pm","direct","cs","meeting","original","project","re","edu","table","conference",";","(","[","!",
"$","#","capital_run_length_average","capital_run_length_longest","capital_run_length_total", "label")
runApp('app/Structure.backup.R')
runApp('app/Structure.backup.R')
runApp('app/Structure.backup.R')
A = major.frame[which(major.frame$major == "History"),"index"]
head(major.frame)
which(major.frame$major == "History")
A = major.frame[which(major.frame$major == "History"),"index"]
A
mean(college[,A])
college = read.csv("D:/Columbia University/Spring2017-Applied Data Science/Project_2_Bz2290/Spr2017-proj2-grp4/data/school.select.csv",header = TRUE)
mean(college[,A])
college %>% filter(college[,A] >= mean(college[,A]))[1:5,1]
college %>% filter(ACTCMMID > 700)[1:5,1]
college %>% filter(college$ACTCMMID > 700)[1:5,1]
college$SATVRMID > 700
college %>% filter(college[,A] >= mean(college[,A]))
college %>% filter(college$ACTCMMID > 700)
college %>% filter(college$ACTCMMID > 700)[1:5,]
runApp('app/Structure.backup.R')
runApp('app/Structure.backup.R')
runApp('app/Structure.backup.R')
runApp('app/Structure.backup.R')
runApp('app/Structure.backup.R')
runApp('app/Structure.backup.R')
runApp('app/Structure.backup.R')
runApp('app/Structure.backup.R')
library(shiny);library(leaflet)
shinyUI(navbarPage("Switch Map",
tabPanel("Map",
div(class="outer",tags$head(includeCSS("styles.css")),
htmlOutput("mapp",inline=TRUE)),
absolutePanel(top = 60, left = "auto", right = 20, bottom = "auto",
selectInput("mapPick", "Background Map",c("OpenStreetMap" = "http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png",
"MapQuestOpen.Aerial"= "http://oatile3.mqcdn.com/tiles/1.0.0/sat/{z}/{x}/{y}.jpg"),
selected = c("http://oatile3.mqcdn.com/tiles/1.0.0/sat/{z}/{x}/{y}.jpg"))))))
shinyServer(function(input, output, session) {
output$map1 <- reactive(TRUE)
map1 <- createLeafletMap(session, "map")
output$mapp <- renderUI({
input$mapPick
isolate({
leafletMap("map", "100%", "100%",
initialTileLayer = input$mapPick,
initialTileLayerAttribution = HTML('Fix This Later'),
options=list(center = center(),zoom = zoom()))
})
})
zoom <- reactive({
ifelse(is.null(input$map_zoom),5,input$map_zoom)
})
center <- reactive({
if(is.null(input$map_bounds)) {
c(40, -98.85)
} else {
map_bounds <- input$map_bounds
c((map_bounds$north + map_bounds$south)/2.0,(map_bounds$east + map_bounds$west)/2.0)
}
})
})
library(shiny);library(leaflet)
shinyApp(
shinyUI(navbarPage("Switch Map",
tabPanel("Map",
div(class="outer",tags$head(includeCSS("styles.css")),
htmlOutput("mapp",inline=TRUE)),
absolutePanel(top = 60, left = "auto", right = 20, bottom = "auto",
selectInput("mapPick", "Background Map",c("OpenStreetMap" = "http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png",
"MapQuestOpen.Aerial"= "http://oatile3.mqcdn.com/tiles/1.0.0/sat/{z}/{x}/{y}.jpg"),
selected = c("http://oatile3.mqcdn.com/tiles/1.0.0/sat/{z}/{x}/{y}.jpg"))))))
shinyServer(function(input, output, session) {
output$map1 <- reactive(TRUE)
map1 <- createLeafletMap(session, "map")
output$mapp <- renderUI({
input$mapPick
isolate({
leafletMap("map", "100%", "100%",
initialTileLayer = input$mapPick,
initialTileLayerAttribution = HTML('Fix This Later'),
options=list(center = center(),zoom = zoom()))
})
})
zoom <- reactive({
ifelse(is.null(input$map_zoom),5,input$map_zoom)
})
center <- reactive({
if(is.null(input$map_bounds)) {
c(40, -98.85)
} else {
map_bounds <- input$map_bounds
c((map_bounds$north + map_bounds$south)/2.0,(map_bounds$east + map_bounds$west)/2.0)
}
})
})
)
library(shiny);library(leaflet)
shinyApp(
ui = navbarPage("Switch Map",
tabPanel("Map",
div(class="outer",tags$head(includeCSS("styles.css")),
htmlOutput("mapp",inline=TRUE)),
absolutePanel(top = 60, left = "auto", right = 20, bottom = "auto",
selectInput("mapPick", "Background Map",c("OpenStreetMap" = "http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png",
"MapQuestOpen.Aerial"= "http://oatile3.mqcdn.com/tiles/1.0.0/sat/{z}/{x}/{y}.jpg"),
selected = c("http://oatile3.mqcdn.com/tiles/1.0.0/sat/{z}/{x}/{y}.jpg")))))
server = function(input, output, session) {
output$map1 <- reactive(TRUE)
map1 <- createLeafletMap(session, "map")
output$mapp <- renderUI({
input$mapPick
isolate({
leafletMap("map", "100%", "100%",
initialTileLayer = input$mapPick,
initialTileLayerAttribution = HTML('Fix This Later'),
options=list(center = center(),zoom = zoom()))
})
})
zoom <- reactive({
ifelse(is.null(input$map_zoom),5,input$map_zoom)
})
center <- reactive({
if(is.null(input$map_bounds)) {
c(40, -98.85)
} else {
map_bounds <- input$map_bounds
c((map_bounds$north + map_bounds$south)/2.0,(map_bounds$east + map_bounds$west)/2.0)
}
})
}
)
runApp('app/Structure.backup.R')
#Structure of our APP:
#Have not been able to dynamically change the opacity of the panel.
library(shiny)
library(ggmap)
library(leaflet)
library(dplyr)
#college<-read.csv(file="D:/Columbia University/Spring2017-Applied Data Science/Project_2_Bz2290/Spr2017-proj2-grp4/data/College2014_15.csv", stringsAsFactors = FALSE,na.strings = "NULL")
#map<-as.data.frame(cbind(college$LONGITUDE, college$LATITUDE, college$HIGHDEG))
#colnames(map)<-c("lon", "lat", "degree")
#map$conm<-college$INSTNM
#map<-na.omit(map)
#college = read.csv("C:/Users/sh355/Documents/GitHub/Spr2017-proj2-grp4/data/school.select.csv", header = TRUE, stringsAsFactors = FALSE)
college = read.csv("D:/Columbia University/Spring2017-Applied Data Science/Project_2_Bz2290/Spr2017-proj2-grp4/data/school.select.csv",header = TRUE)
major = c("Agriculture, Agriculture Operations, And Related Sciences","Natural Resources And Conservation", "Architecture And Related Services","Area, Ethnic, Cultural, Gender, And Group Studies"," Communication, Journalism, And Related Programs","Communications Technologies/Technicians And Support Services","Computer And Information Sciences And Support Services","Personal And Culinary Services"," Education","Engineering","Engineering Technologies And Engineering-Related Fields","Foreign Languages, Literatures, And Linguistics"," Family And Consumer Sciences/Human Sciences","Legal Professions And Studies","English Language And Literature/Letters","Liberal Arts And Sciences, General Studies And Humanities","Library Science"," Biological And Biomedical Sciences","Mathematics And Statistics","Military Technologies And Applied Sciences","Multi/Interdisciplinary Studies","Parks, Recreation, Leisure, And Fitness Studies","Philosophy And Religious Studies","Theology And Religious Vocations"," Physical Sciences"," Science Technologies/Technicians"," Psychology"," Homeland Security, Law Enforcement, Firefighting And Related Protective Services","Public Administration And Social Service Professions","Social Sciences","Construction Trades","Mechanic And Repair Technologies/Technicians","Precision Production","Transportation And Materials Moving","Visual And Performing Arts","Health Professions And Related Programs","Business, Management, Marketing, And Related Support Services","History")
major.index =c("PCIP01",
"PCIP03",
"PCIP04",
"PCIP05",
"PCIP09",
"PCIP10",
"PCIP11",
"PCIP12",
"PCIP13",
"PCIP14",
"PCIP15",
"PCIP16",
"PCIP19",
"PCIP22",
"PCIP23",
"PCIP24",
"PCIP25",
"PCIP26",
"PCIP27",
"PCIP29",
"PCIP30",
"PCIP31",
"PCIP38",
"PCIP39",
"PCIP40",
"PCIP41",
"PCIP42",
"PCIP43",
"PCIP44",
"PCIP45",
"PCIP46",
"PCIP47",
"PCIP48",
"PCIP49",
"PCIP50",
"PCIP51",
"PCIP52",
"PCIP54")
major.frame = data.frame(major = major, index = major.index)
shinyApp(
ui = fluidPage(
navbarPage("Our App's Name",
tabPanel("Locate Your School!",
sidebarLayout(
sidebarPanel(
#absolutePanel(top = 50,
#             right = 20,
#            width = 300,       Remove these comments to initate moveable panel
#           height = 600,
#          draggable = TRUE,
#cursor = "move",
#sliderInput("stat","start Comparison",min=1,max=20,step=1,value =1)
fluidRow(column(11,selectInput("major","Your Major",choices = c("None",major),selected = "None"))),
fluidRow(column(3,numericInput("sat.reading","SAT Read",value=0,min=0,max=100)),
column(3,numericInput("sat.math","SAT Math",value=0,min=0,max=100),offset = 1),
column(3,numericInput("sat.writing","SAT Write",value=0,min=20,max=100),offset = 1)),
fluidRow(column(11,numericInput("score.act","ACT Scores",value=0,min=0,max=36))),
fluidRow(
wellPanel(
checkboxGroupInput("location","In State?",choices = c("In state", "Out state"),selected = "In state"),
numericInput("max","Maximum acceptable Tution",min = 0, max = 51010, value = 0))),
#radioButtons("cost","Preferred Cost of Attendence",choices=c("NONE","$2000-$2999","$3000-$3999"),selected = "NONE"),
#checkboxGroupInput("stat","Start Comparison!",choices="Show stats!",selected = NULL),
fluidRow(
wellPanel(actionButton("search", "Start Searching!"),
checkboxInput("stat","Demographic")
))
#sliderInput("Alt","Altitude",min=40.5,max=45.04,step = 0.0001,value = 40.7484),
#sliderInput("Long","Longitude",min=-80.52,max=-71.95,step = 0.0001,value=-73.9857)
#Do not forget to add comma, if you want to initate moveable panel.
#         style = "opacity: 0.9"
#        )
),
mainPanel(
#conditionalPanel("input.stat =='Show stats!'",
# absolutePanel(top = 50,
#             width =300,
#             height = 10000,
#            draggable = TRUE,
#          wellPanel(
#           sliderInput("input","BLBLABLA",min =1 ,max =20 ,step =1, value =1)
#                  ),
#        style = "opacity: 0.9"
#       )
#        ),
#div(class="outer",tags$head(includeCSS("styles.css")),
uiOutput("map")
)
)
),
tabPanel("Comparision!",
fluidRow(
column(width = 4, textOutput("test.1"))
),
hr(),
fluidRow(
column(width = 4, textOutput("test.2")),
column(width = 4, offset = 1, textOutput("test.3"))
)
),
tabPanel("Historical Data Overview"),
tabPanel("Data Reference",
absolutePanel(top = 20,
left = 20,
height = 600,
width = 300,
draggable = TRUE,
wellPanel(
sliderInput("n","",min = 5, max = 20,value=5)
)
)
),
tabPanel("About us",
textOutput("test.6")
)
)
),
server = function(input, output){
major.data.index = reactive({
major.frame[which(major.frame$major == input$major),"index"]#major  index
})
major.data.frame.mean = reactive({
mean(college[,major.data.index()])
})
school.selection = eventReactive(input$search,{
if(input$major != "None" & ((input$sat.reading == 0 & input$sat.writing == 0 & input$sat.math == 0)|(input$score.act == 0))  & input$max == 0)
{
college %>% filter(college[,major.data.index()] >= major.data.frame.mean())
}
else if(input$major == "None" & ((input$sat.reading != 0 & input$sat.writing != 0 & input$sat.math != 0)|(input$score.act != 0))  & input$max == 0)
{
college %>% filter((ACTCMMID <= input$score.act | ((SATVRMID <= input$sat.reading & SATMTMID <= input$sat.math) | (SATVRMID <= input$sat.reading & SATWRMID <= input$sat.writing) | (SATWRMID <= input$sat.writing & SATMTMID <= input$sat.math)|(SATVRMID <= input$sat.reading & SATMTMID <= input$sat.math & SATWRMID <= input$sat.writing))))
}
else if(input$major == "None" & ((input$sat.reading == 0 & input$sat.writing == 0 & input$sat.math == 0)|(input$score.act == 0))  & input$max != 0)
{
if(input$location == "In state")
{
college %>% filter(TUITIONFEE_IN <= input$max)
}
else if(input$location == "Out state")
{
college %>% filter(TUITIONFEE_OUT <= input$max)
}
}
else if(input$major != "None" & ((input$sat.reading != 0 & input$sat.writing != 0 & input$sat.math != 0)|(input$score.act != 0))  & input$max != 0)
{
if(input$location == "In state")
{
college %>% filter((ACTCMMID <= input$score.act | ((SATVRMID <= input$sat.reading & SATMTMID <= input$sat.math) | (SATVRMID <= input$sat.reading & SATWRMID <= input$sat.writing) | (SATWRMID <= input$sat.writing & SATMTMID <= input$sat.math)|(SATVRMID <= input$sat.reading & SATMTMID <= input$sat.math & SATWRMID <= input$sat.writing))) & TUITIONFEE_IN <= input$max & college[,major.data.index()] > major.data.frame.mean())
}
else if(input$location == "Out state")
{
college %>% filter((ACTCMMID <= input$score.act | ((SATVRMID <= input$sat.reading & SATMTMID <= input$sat.math) | (SATVRMID <= input$sat.reading & SATWRMID <= input$sat.writing) | (SATWRMID <= input$sat.writing & SATMTMID <= input$sat.math)|(SATVRMID <= input$sat.reading & SATMTMID <= input$sat.math & SATWRMID <= input$sat.writing))) & TUITIONFEE_OUT <= input$max & college[,major.data.index()] > major.data.frame.mean())
}
}
else if(input$major != "None" & ((input$sat.reading != 0 & input$sat.writing != 0 & input$sat.math != 0)|(input$score.act != 0))  & input$max == 0)
{
college %>% filter((ACTCMMID <= input$score.act | ((SATVRMID <= input$sat.reading & SATMTMID <= input$sat.math) | (SATVRMID <= input$sat.reading & SATWRMID <= input$sat.writing) | (SATWRMID <= input$sat.writing & SATMTMID <= input$sat.math)|(SATVRMID <= input$sat.reading & SATMTMID <= input$sat.math & SATWRMID <= input$sat.writing)))  & college[,major.data.index()] > major.data.frame.mean())
}
else if(input$major != "None" & ((input$sat.reading == 0 & input$sat.writing == 0 & input$sat.math == 0)|(input$score.act == 0))  & input$max != 0)
{
if(input$location == "In state")
{
college %>% filter(TUITIONFEE_IN <= input$max & college[,major.data.index()] > major.data.frame.mean())
}
else if(input$location == "Out state")
{
college %>% filter(TUITIONFEE_OUT <= input$max & college[,major.data.index()] > major.data.frame.mean())
}
}
else if(input$major == "None" & ((input$sat.reading != 0 & input$sat.writing != 0 & input$sat.math != 0)|(input$score.act != 0))  & input$max != 0)
{
if(input$location == "In state")
{
college %>% filter((ACTCMMID <= input$score.act | ((SATVRMID <= input$sat.reading & SATMTMID <= input$sat.math) | (SATVRMID <= input$sat.reading & SATWRMID <= input$sat.writing) | (SATWRMID <= input$sat.writing & SATMTMID <= input$sat.math)|(SATVRMID <= input$sat.reading & SATMTMID <= input$sat.math & SATWRMID <= input$sat.writing))) & TUITIONFEE_IN <= input$max)
}
else if(input$location == "Out state")
{
college %>% filter((ACTCMMID <= input$score.act | ((SATVRMID <= input$sat.reading & SATMTMID <= input$sat.math) | (SATVRMID <= input$sat.reading & SATWRMID <= input$sat.writing) | (SATWRMID <= input$sat.writing & SATMTMID <= input$sat.math)|(SATVRMID <= input$sat.reading & SATMTMID <= input$sat.math & SATWRMID <= input$sat.writing))) & TUITIONFEE_OUT <= input$max)
}
}
})
output$map=renderUI({
leafletOutput('myMap', width = "100%", height = 700)
})
output$myMap = renderLeaflet({
leaflet() %>%
setView(lng = -73.9857, lat = 40.7484, zoom = 6) %>%
addProviderTiles("CartoDB.Positron") %>%
addCircleMarkers(lng = school.selection()$LONGITUDE, lat = school.selection()$LATITUDE, popup = school.selection()$INSTNM)
})
output$text = renderPrint({
"Which Conerns you the most?"
})
output$test.1 = renderPrint({
"Our Graphs go to here...."
})
output$test.2 = renderPrint({
"Our Options go to here..."
})
output$test.3 = renderPrint({
"Our Options go to here too..."
})
output$test.6 = renderText({
"Our Team introduction, project introduction, and stuff..."
})
}
)
runApp('app/Structure.backup.R')
m %>% addProviderTiles("MtbMap") %>%
addProviderTiles("Stamen.TonerLines",
options = providerTileOptions(opacity = 0.35)
) %>%
addProviderTiles("Stamen.TonerLabels")
m %>%
addProviderTiles("MtbMap") %>%
addProviderTiles("Stamen.TonerLines",options = providerTileOptions(opacity = 0.35)) %>%
addProviderTiles("Stamen.TonerLabels")
m %>% addProviderTiles("MtbMap") %>%addProviderTiles("Stamen.TonerLines",options = providerTileOptions(opacity = 0.35)) %>% addProviderTiles("Stamen.TonerLabels")
m %>% addProviderTiles("Stamen.Toner")
m = leaflet() %>%
addProviderTiles("MtbMap") %>%addProviderTiles("Stamen.TonerLines",options = providerTileOptions(opacity = 0.35)) %>% addProviderTiles("Stamen.TonerLabels")
m
runApp('app/Structure.backup.R')
runApp('app/Structure.backup.R')
runApp('app/Structure.backup.R')
runApp('app/Structure.backup.R')
runApp('app/Structure.backup.R')
runApp('app/Structure.backup.R')
runApp('app/Structure.backup.R')
